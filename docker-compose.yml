version: "3.8"

services:
  land_app:
    build:
      context: ./ardhi
      dockerfile: Dockerfile
    container_name: ardhi_app
    hostname: land_app
    command: >
      sh -c "python3 manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput --clear &&
             gunicorn ardhi.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./ardhi:/home/app/web
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    # ports:
    #   - 8000:8000
    expose:
      - 8000
    environment:
      - DEBUG=${DEBUG}
#      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - PG_DB_HOST=${PG_DB_HOST}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASS=${PG_PASS}
      - POSTGRES_DB=${PG_NAME}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
    restart: "on-failure"
    depends_on:
      - postgres-db
      - redis
    networks:
      # - front-end
      # - back-end
      - land_app

  postgres-db:
    restart: "on-failure"
    image: kartoza/postgis:12.0
    container_name: postgis_db
    hostname: postgres-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASS=${PG_PASS}
      - POSTGRES_DB=${PG_NAME}
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    networks:
      # - back-end
      - land_app

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    hostname: pgadmin
    restart: unless-stopped
#    env_file:
#      - ./ardhi/.env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin:/root/.pgadmin
    depends_on:
      - postgres-db
    networks:
      - land_app

  geoserver:
    image: kartoza/geoserver:${GS_VERSION}
    build:
      context: ./compose/geoserver
      dockerfile: Dockerfile
      args:
        IMAGE_VERSION: ${IMAGE_VERSION}
        JAVA_HOME: ${JAVA_HOME}
        GS_VERSION: ${GS_VERSION}
        WAR_URL: ${WAR_URL}
#        STABLE_PLUGIN_URL: ${STABLE_PLUGIN_URL}
        DOWNLOAD_ALL_STABLE_EXTENTIONS: ${DOWNLOAD_ALL_STABLE_EXTENTIONS}
        DOWNLOAD_ALL_COMMUNITY_EXTENTIONS: ${DOWNLOAD_ALL_COMMUNITY_EXTENTIONS}
    container_name: geoserver
    hostname: geoserver
    volumes:
     - geoserver_data:/opt/geoserver/data_dir
     - /tmp/settings/epsg.properties:/opt/geoserver/data_dir/user_projections/epsg.properties
    ports:
      - "8600:8080"
    restart: on-failure
    depends_on:
      - postgres-db
    networks:
      - land_app
    environment:
       - DB_BACKEND=${DB_BACKEND}
       - POSTGRES_PORT=${PG_PORT}
       - POSTGRES_USER=${PG_USER}
       - POSTGRES_PASS=${PG_PASS}
       - POSTGRES_DB=${PG_NAME}
       - GEOSERVER_DATA_DIR=${GEOSERVER_DATA_DIR}
       - GEOWEBCACHE_CACHE_DIR=${GEOWEBCACHE_CACHE_DIR}
       - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
       - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
       - INITIAL_MEMORY=${INITIAL_MEMORY}
       - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
       - RECREATE_DATADIR=${RECREATE_DATADIR}
       - STABLE_EXTENSIONS=${STABLE_EXTENSIONS}

  redis:
    restart: unless-stopped
    container_name: redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - land_app
      # - back-end

  celery:
    restart: always
    container_name: celery
    build:
      context: ./ardhi
    command: celery -A ardhi worker -l info
    volumes:
      - ./ardhi:/home/app/web
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    environment:
      - DEBUG=${DEBUG}
      - PG_DB_HOST=${PG_DB_HOST}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASS=${PG_PASS}
      - POSTGRES_DB=${PG_NAME}
#      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    #   # - CELERY_BROKER=${CELERY_BROKER}
    #   # - CELERY_BACKEND=${CELERY_BACKEND}
    depends_on:
      - postgres-db
      - redis
      - land_app
      - nginx

  nginx:
    restart: unless-stopped
    depends_on:
      - land_app
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    build:
      context: ./compose/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "1337:80"
      # - 443:443
    networks:
      - land_app

networks:
  land_app:
    driver: bridge

# networks:
#   front-end:
#   back-end:


  # networks:
  #   nginx_network:
  #     driver: bridge
  #   database1_network:  # <-- add the bridge
  #     driver: bridge


volumes:
  postgres_data:
  static_volume:
  media_volume:
  redisdata:
  geoserver_data:
  pgadmin:



#  imposm:
#    image: kartoza/docker-osm:imposm-latest
#    build: docker-imposm3
#    container_name: dockerosm_imposm
#    volumes:
#      - ./settings:/home/settings
#      - import_done:/home/import_done
#      - import_queue:/home/import_queue
#      - cache:/home/cache
#    depends_on:
#      db:
#        condition: service_healthy
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASS=${POSTGRES_PASS}
#      - POSTGRES_DBNAME=${POSTGRES_DBNAME}
#      - POSTGRES_PORT=${POSTGRES_PORT}
#      - POSTGRES_HOST=${POSTGRES_HOST}
#      - TIME=${TIME}
#      - SETTINGS=${SETTINGS}
#      - CACHE=${CACHE}
#      - IMPORT_DONE=${IMPORT_DONE}
#      - IMPORT_QUEUE=${IMPORT_QUEUE}
#      - SRID=${SRID}
#      - OPTIMIZE=${OPTIMIZE}
#      - DBSCHEMA_PRODUCTION=${DBSCHEMA_PRODUCTION}
#      - DBSCHEMA_IMPORT=${DBSCHEMA_IMPORT}
#      - DBSCHEMA_BACKUP=${DBSCHEMA_BACKUP}
#      - QGIS_STYLE=${QGIS_STYLE}
#      - CLIP=${CLIP}
#    command: bash -c "while [ ! -f /home/settings/country.pbf ] ; do sleep 1; done && python3 -u /home/importer.py"
#
#    osmupdate:
#      build: docker-osmupdate
#      image: kartoza/docker-osm:osmupdate-latest
#      container_name: dockerosm_osmupdate
#      volumes_from:
#        - imposm
#      depends_on:
#        db:
#          condition: service_healthy
#      environment:
#        - MAX_DAYS=${MAX_DAYS}
#        - DIFF=${DIFF}
#        - MAX_MERGE=${MAX_MERGE}
#        - COMPRESSION_LEVEL=${COMPRESSION_LEVEL}
#        - BASE_URL=${BASE_URL}
#        - IMPORT_QUEUE=${IMPORT_QUEUE}
#        - IMPORT_DONE=${IMPORT_DONE}
#        - TIME=${TIME}



  #   nginx-proxy:
  #     container_name: nginx-proxy
  #     build: ./nginx
  #     restart: always
  #     ports:
  #       - 443:443
  #       - 80:80
  #     volumes:
  #       - static_volume:/usr/src/app/static
  #       - media_volume:/usr/src/app/media
  #       - certs:/etc/nginx/certs
  #       - html:/usr/share/nginx/html
  #       - vhost:/etc/nginx/vhost.d
  #       - /var/run/docker.sock:/tmp/docker.sock:ro
  #     depends_on:
  #       - django
  #   nginx-proxy-letsencrypt:
  #     image: jrcs/letsencrypt-nginx-proxy-companion
  #     env_file:
  #       - ./core/env/env.prod.proxy-companion
  #     volumes:
  #       - /var/run/docker.sock:/var/run/docker.sock:ro
  #       - certs:/etc/nginx/certs
  #       - html:/usr/share/nginx/html
  #       - vhost:/etc/nginx/vhost.d
  #     depends_on:
  #       - nginx-proxy
  # volumes:
  #   redisdata:
  #   static_volume:
  #   media_volume:
  #   certs:
  #   html:
  #   vhost:







# 
#  qgis:
#    image: kartoza/qgis-server
#    container_name: QGIS
#    hostname: qgis-server
#    volumes:
#      # Wherever you want to mount your data from
#      - ./project:/project
#    links:
#      - postgres-db:postgres-db
#    ports:
#      - "8080:80"
#    environment:
#      QGIS_PROJECT_FILE: ''
#      QGIS_DEBUG 5
#      QGIS_LOG_FILE /proc/self/fd/1
#      QGIS_SERVER_LOG_FILE /proc/self/fd/1
#      QGIS_SERVER_LOG_LEVEL 5
#      PGSERVICEFILE /project/pg_service.conf
#      QGIS_PROJECT_FILE /project/project.qgs
#      QGIS_PLUGINPATH /opt/qgis-server/plugins
#    stdin_open: true
#    tty: true
#    extra_hosts:
#      - postgis.kartoza.com:postgis.kartoza.com
#    volumes_from:
#      - bstync



  #    qgis-server:
  #      # Should use version with utf-8 locale support:
  #      image: qgis-server:latest
  #      volumes:
  #        - REPLACE_WITH_FULL_PATH/data:/data:ro
  #      environment:
  #        - LANG=en_EN.UTF-8
  #        - QGIS_PROJECT_FILE=/data/osm.qgs
  #        - QGIS_SERVER_LOG_LEVEL=0  # INFO (log all requests)
  #        - DEBUG=1                  # display env before spawning QGIS Server
  #        - VIRTUAL_HOST=qgis-server.com
  #        - LETSENCRYPT_HOST=qgis-server.com
  #        - LETSENCRYPT_EMAIL=youremail@gmail.com

